#include <iostream>
#include <bits/stdc++.h>

using namespace std;



bool search(vector<string> words, string element){

  int l = 0, r = words.size()-1;
  while(l<=r){
    int mid = (l+r)/2;
    if(words[mid]==element){
      return true;
    }
    else if(words[mid]>element){
      r = mid-1;
    }
    else if(words[mid]<element){
      l = mid+1;
    }
  }
  return false;
}

// To execute C++, please define "int main()"
int main() {
  vector<string> words = { "John", "Nitin", "Umaid", "X"};
  string element = "X";
  if(search(words, element))
    cout<<"Yes";
  else
    cout<<"No";

  return 0;
}


// Your previous Plain Text content is preserved below:

// Q : Implement an enterprise employee directory with employees details as follows:- 
// Employee Email(unique Id), Employee Name (other attributes to be ignored) and supporting the following operations :- 
// 1. Create a new employee 
// 2. Search by employee Name to output his/her email. (This is by far the most frequently performed operation)
// 3. Delete by Id 
//  Note : We need to implement it as an standalone /embedded software program (no DBs or system/3P libraries). The implementation needs to be memory efficient too.


//  -- any other ds other than hashmap and has linear or close to constant lookup time_complexity

//  -- 1 ----> n

// [[umaid, umaidansari123@gmail.com], [john, john@gmail.com], [mohd, mohd@gmail.com]]


// search by name

// umaid
// john

// -- 

// heap is a tree kind of data structure wherein element has two children and an 

// -- the idea here is to use a ds which can maintain its sorted property 
//   - with min complexity for insertion as well as searching
// [1 2 3] -> 2
//          1   3


//   2 
// 1   3

// John, Nitin, Umaid 

// Nitin, Umaid, John

// -- find out the rotation point in list in logn time
// -- 5 6 7 1 2 3 4
// -- 1 2 3 4 5 6 7

// -- assume list is sorted



 


// Umain , John, Nitin

// -- we want to search in logn time 
// -- we are given rotated list 
// -- firstly we will found out the rotation point from which the list is rotated
// -- 0,1,2
// -- [Nitin, Umaid, John] --> 
// -- John, Nitin, Umaid
// -- search element = Nitin
// -- l = 0, r=2
// -- mid = (0+2)/2 = 1
// -- Umaid -> 
// -- l = 0, r = mid-1
// -- 

// list increasing and then decreasing

// de

// BST smaller elements on left and larger right

// again do binary seach in every part and accordingly 

