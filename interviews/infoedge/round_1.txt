given an array of size n and a number k such that k<=n, print the count of distinct elements in every window of size k in this array


1 2 1 3 4 4 5 6

k=3

2 3 3 2 2 3

i = 0  -> size - k

j = i  -> (i+k)-1

I = 0
J = 0, 1, 2

map<int,int> count_frequency;

Cout << count_frequency.size() << endl;
O(N-K) * O(K) = O(N*K)

SC - O(K)

int 

def solve(a, k):
  n = len(a)
  left, right = 0, 0

  answer = []

  count_frequency = {}

  # 1st window
  while (right < k):
    if(count_frequency.get(a[right], 0) == 0):
      count_frequency[a[right]] = 1
    else:
      count_frequency[a[right]] += 1
    right += 1
  answer.append(len(count_frequency))

  # rest window
  while(right < n):
    if(count_frequency.get(a[left]) == 1):
      count_frequency.pop(a[left])
    else:
      count_frequency[a[left]]-=1
    left+=1
    if(count_frequency.get(a[right], 0) == 0):
      count_frequency[a[right]] = 1
    else:
      count_frequency[a[right]] += 1
    right+=1
    answer.append(len(count_frequency))
  return answer


if __name__ == '__main__':
  a = [1, 2, 1, 3, 4, 4, 5, 6]
  k = 3
  answer = solve(a, k)
  print(answer)





country
--------
countryID - PK
countryName

state
----
stateID - PK
stateName
countryID - FK
Population 

Print all country names for which the population > 100

#1 
With country_population_data as (
select countryID, sum(population) as country_population from state group by countryID
)

Select c.countryName from country_population_data cpd join country c on cpd.countryID = c.countryID where cpd.country_population > 100

#2
select c.countryID, c.countryName, sum(s.population) as country_population from state s join country c on group by s.countryID having sum(s.population)>100

# Difference between where and having clause 	
Tables - millions of records
Query data on the table
How to optimize query -
- indexing
Drawbacks of indexing
What will happen in case of frequent insertion
MVC architecture
Frameworks used in python, internal libraries used
Tell about request response cycle
/login/

a = app()

